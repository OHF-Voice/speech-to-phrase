---

HassNevermind:
  description: "Does nothing. Used to cancel a request"
  slot_combinations:
    default:
      slots: []
      example: "nevermind"

HassGetCurrentTime:
  description: "Gets the current time"
  slot_combinations:
    default:
      slots: []
      example: "what time is it"

HassGetCurrentDate:
  description: "Gets the current date"
  slot_combinations:
    default:
      slots: []
      example: "what is the date"

HassGetWeather:
  description: "Gets the current weather"
  slots:
    name: "Name of the weather entity to use"
  slot_combinations:
    default:
      slots: []
      example: "what is the weather"
    name_only:
      slots: "name"
      domain: "weather"
      example: "what is the weather in New York"

# HassTurnOn:
#   description: "Turns on a device or entity"
#   slots:
#     name: "Name of a device or entity"
#     area: "Name of an area"
#     floor: "Name of a floor"
#     domain: "Domain of devices/entities in an area"
#     device_class: "Device class of devices/entities in an area"
#   slot_combinations:
#     - slots: "domain"
#       context_area: true
#       domain:
#         - "light"
#         - "fan"
#       example: "turn on the lights in here"
#     - slots: "name"
#       domain:
#         - "light"
#         - "cover"
#         - "switch"
#         - "fan"
#         - "media_player"
#         - "input_boolean"
#       example:
#         - "turn on the overhead light"
#         - "open the sliding door"
#     - slots:
#         - "area"
#         - "domain"
#       domain:
#         - "light"
#         - "fan"
#       example: "turn on the lights in the kitchen"
#     - slots:
#         - "name"
#         - "area"
#       domain:
#         - "light"
#         - "cover"
#         - "switch"
#         - "fan"
#         - "media_player"
#         - "input_boolean"
#       example: "turn on the overhead light in the kitchen"
#     - slots:
#         - "area"
#         - "domain"
#         - "device_class"
#       domain: "cover"
#       example: "open the curtains in the living room"
#     - slots:
#         - "floor"
#         - "domain"
#       domain:
#         - "light"
#         - "fan"
#       example: "turn on the upstairs lights"
#     - slots:
#         - "floor"
#         - "domain"
#         - "device_class"
#       domain: "cover"
#       example: "open the curtains on the main floor"

# HassTurnOff:
#   description: "Turns off a device or entity"
#   slots:
#     name: "Name of a device or entity"
#     area: "Name of an area"
#     floor: "Name of a floor"
#     domain: "Domain of devices/entities in an area"
#     device_class: "Device class of devices/entities in an area"
#   slot_combinations:
#     - slots: "domain"
#       context_area: true
#       domain:
#         - "light"
#         - "fan"
#       example: "turn off the lights in here"
#     - slots: "name"
#       domain:
#         - "light"
#         - "cover"
#         - "switch"
#         - "fan"
#         - "media_player"
#         - "input_boolean"
#       example:
#         - "turn off the overhead light"
#         - "close the sliding door"
#     - slots:
#         - "area"
#         - "domain"
#       example: "turn off the lights in the kitchen"
#     - slots:
#         - "name"
#         - "area"
#       example: "turn off the overhead light in the kitchen"
#     - slots:
#         - "area"
#         - "domain"
#         - "device_class"
#       example: "close the curtains in the living room"
#     - slots:
#         - "floor"
#         - "domain"
#       example: "turn off the upstairs lights"
#     - slots:
#         - "floor"
#         - "domain"
#         - "device_class"
#       example: "close the curtains on the main floor"
#     - slots:
#         - "name"
#         - "floor"
#       example: "turn off the overhead light upstairs"
#     - slots: "domain"
#       example: "turn off all the lights in the house"

# HassGetState:
#   description: "Gets or checks the state of an entity"
#   slots:
#     name: "Name of a device or entity"
#     area: "Name of an area"
#     floor: "Name of a floor"
#     domain: "Domain of devices/entities in an area"
#     device_class: "Device class of devices/entities in an area"
#     state: "Name of state to match"
#   slot_combinations:
#     - slots: "name"
#       domain: "sensor"
#       example: "what is the value of sensor 1"
#     - slots:
#         - "name"
#         - "area"
#       example: "what is the value of sensor 1 in the kitchen"
#     - slots:
#         - "name"
#         - "floor"
#       importance: "complete"
#       example: "what is the value of sensor 1 on the first floor"
#     - slots:
#         - "state"
#         - "domain"
#       importance: "optional"
#       example: "are there any lights on"
#     - slots:
#         - "state"
#         - "domain"
#         - "area"
#       importance: "optional"
#       example: "are there any lights on in the kitchen"
#     - slots:
#         - "state"
#         - "domain"
#         - "floor"
#       importance: "optional"
#       example: "are there any lights on upstairs"
#     - slots:
#         - "state"
#         - "device_class"
#         - "domain"
#       importance: "optional"
#       example: "are any batteries charging"
#     - slots:
#         - "state"
#         - "device_class"
#         - "domain"
#         - "area"
#       importance: "optional"
#       example: "are any batteries charging in the garage"
#     - slots:
#         - "state"
#         - "device_class"
#         - "domain"
#         - "floor"
#       importance: "optional"
#       example: "are any batteries charging in the basement"

# HassLightSet:
#   description: "Sets the brightness or color of a light"
#   slots:
#     name: "Name of a device or entity"
#     area: "Name of an area"
#     floor: "Name of a floor"
#     brightness: "Brightness percentage from 0 to 100"
#     color: "Name of color"
#   slot_combinations:
#     # brightness
#     - slots:
#         - "brightness"
#       context_area: true
#       importance: "usable"
#       example: "set the brightness in here to 50%"
#     - slots:
#         - "name"
#         - "brightness"
#       importance: "usable"
#       example: "set the overhead light brightness to 50%"
#     - slots:
#         - "area"
#         - "brightness"
#       importance: "usable"
#       example: "set the living room brightness to 50%"
#     - slots:
#         - "floor"
#         - "brightness"
#       importance: "complete"
#       example: "set the main floor brightness to 50%"
#     # color
#     - slots:
#         - "color"
#       context_area: true
#       importance: "usable"
#       example: "set the lights in here to red"
#     - slots:
#         - "name"
#         - "color"
#       importance: "usable"
#       example: "set the overhead light to red"
#     - slots:
#         - "area"
#         - "color"
#       importance: "usable"
#       example: "set the living room to red"
#     - slots:
#         - "floor"
#         - "color"
#       importance: "complete"
#       example: "set the main floor to red"

# timers
HassStartTimer:
  description: "Starts a timer"
  slots:
    hours: "Number of hours"
    minutes: "Number of minutes"
    seconds: "Number of seconds"
  slot_combinations:
    seconds_only:
      slots: "seconds"
      example: "set a timer for 30 seconds"
    hours_only:
      slots: "hours"
      example: "set a timer for 1 hour"
    minutes_1:
      slots: "minutes"
      example: "set a timer for 1 minute"
    minutes_only:
      slots: "minutes"
      example: "set a timer for 10 minutes"
    minutes_1_half:
      slots: "minutes"
      example: "set a timer for 1 and a half minutes"
    minutes_half:
      slots: "minutes"
      example: "set a timer for 10 and a half minutes"
    hours_1:
      slots:
        - "hours"
      example: "set a timer for 1 hour"
    hours_1_minutes_1:
      slots:
        - "hours"
        - "minutes"
      example: "set a timer for 1 hour and 1 minute"
    hours_1_minutes:
      slots:
        - "hours"
        - "minutes"
      example: "set a timer for 1 hour and 10 minute"
    hours_minutes_1:
      slots:
        - "hours"
        - "minutes"
      example: "set a timer for 2 hours and 1 minute"
    hours_minutes:
      slots:
        - "hours"
        - "minutes"
      example: "set a timer for 1 hour and 10 minutes"
    hours_1_half:
      slots:
        - "hours"
        - "minutes"
      example: "set a timer for 1 and a half hours"
    hours_half:
      slots:
        - "hours"
        - "minutes"
      example: "set a timer for 2 and a half hours"

HassCancelAllTimers:
  description: "Cancels all timers"
  slot_combinations:
    default:
      slots: []
      example: "cancel all timers"

HassCancelTimer:
  description: "Cancels a timer"
  slot_combinations:
    default:
      slots: []
      example: "cancel my timer"

HassPauseTimer:
  description: "Pauses a running timer"
  slot_combinations:
    default:
      slots: []
      example: "pause my timer"

HassUnpauseTimer:
  description: "Resumes a paused timer"
  slot_combinations:
    default:
      slots: []
      example: "resume my timer"

HassTimerStatus:
  description: "Reports status of one or more timers"
  slot_combinations:
    default:
      slots: []
      example: "how much time is left on my timer"

# media players
HassMediaPause:
  description: "Pauses a media player"
  slots:
    name: "Name of a device or entity"
  slot_combinations:
    default:
      slots: []
      context_area: true
      example: "pause"
    name_only:
      slots: "name"
      example: "pause TV"

HassMediaUnpause:
  description: "Unpauses a media player"
  slots:
    name: "Name of a device or entity"
  slot_combinations:
    default:
      slots: []
      context_area: true
      example: "resume"
    name_only:
      slots: "name"
      example: "resume TV"

HassMediaNext:
  description: "Skips a media player to the next item"
  slots:
    name: "Name of a device or entity"
  slot_combinations:
    default:
      slots: []
      context_area: true
      example: "next track"
    name_only:
      slots: "name"
      example: "next track on the stereo"


# temperature
HassClimateGetTemperature:
  description: "Gets the current temperature of a climate device or entity"
  slots:
    name: "Name of a device or entity"
    area: "Name of an area"
    floor: "Name of a floor"
  slot_combinations:
    default:
      slots: []
      context_area: true
      example: "what is the temperature"
    name_only:
      slots: "name"
      example: "what is the temperature of the EcoBee"
    area_only:
      slots: "area"
      example: "what is the temperature in the bedroom"
    floor_only:
      slots: "floor"
      example: "what is the temperature downstairs"
