language: en

lists:
  color:
    values:
      - "white"
      - "black"
      - "red"
      - "orange"
      - "yellow"
      - "green"
      - "blue"
      - "purple"
      - "brown"
      - "pink"
      - "turquoise"
  brightness:
    range:
      from: 10
      to: 100
      step: 10
  seconds:
    range:
      from: 10
      to: 100
      step: 5
  minutes_small:
    range:
      from: 2
      to: 19
  minutes_large:
    range:
      from: 20
      to: 100
      step: 10
  minutes_extra:
    values:
      - in: "45"
        out: 45
      - in: forty five
        out: 45
  minutes_half:
    values:
      - in: half
        out: 30
  hours_half:
    values:
      - in: half
        out: 30
  hours:
    range:
      from: 2
      to: 24
  cover_classes:
    values:
      - blinds
      - curtain[s]
      - window[s]
  cover_states:
    values:
      - open
      - closed
  lock_states:
    values:
      - locked
      - unlocked

expansion_rules:
  # timer_set: "(set|start|create)"
  timer_set: "set"

intents:
  # nevermind
  HassNevermind:
    data:
      - sentences:
          - "never[ ]mind"
        metadata:
          slot_combination: "default"

  # date, time, weather
  HassGetCurrentTime:
    data:
      - sentences:
          - "(what's|what is) the [current] time"
          - "what time is it [[right ]now]"
        metadata:
          slot_combination: "default"

  HassGetCurrentDate:
    data:
      - sentences:
          - "(what's|what is) the date [today]"
          - "(what's|what is) today's date"
        metadata:
          slot_combination: "default"

  HassGetWeather:
    data:
      - sentences:
          - "(what's|what is) the weather [like]"
        metadata:
          slot_combination: "default"

      - sentences:
          - "(what's|what is) the {name} weather [like]"
          - "(what's|what is) the weather [like] in {name}"
        requires_context:
          domain: weather
        metadata:
          slot_combination: "name_only"

  # # turn on/off
  # # open/close
  # # lock/unlock
  # HassTurnOn:
  #   data:
  #     # turn on
  #     - sentences:
  #         - "turn on [the] lights"

  #     - sentences:
  #         - "turn on [the] {name}"
  #         - "turn on [the] {name} in [the] {area}"
  #         - "turn on [the] {name} (on|in) [the] {floor} [floor]"
  #       requires_context:
  #         domain:
  #           - light
  #           - switch
  #           - fan
  #           - media_player
  #           - input_boolean

  #     - sentences:
  #         - "turn on [all|the|all of the] {area} lights"
  #         - "turn on [all|the|all of the] lights in [the] {area}"

  #     - sentences:
  #         - "turn on [all|the|all of the] {floor} [floor] lights"
  #         - "turn on [all|the|all of the] lights (on|in) [the] {floor} [floor]"

  #     # open
  #     - sentences:
  #         - "open [the] {name}"
  #       requires_context:
  #         domain:
  #           - cover

  #     - sentences:
  #         - "open [the] {cover_classes} in [the] {area}"
  #         - "open [the] {area} {cover_classes}"

  #     - sentences:
  #         - "open [the] {cover_classes} (on|in) [the] {floor} [floor]"
  #         - "open {floor} [floor] {cover_classes}"

  #     # lock
  #     - sentences:
  #         - "lock [the] {name}"
  #       requires_context:
  #         domain: lock

  #     # script
  #     - sentences:
  #         - "run {name} [script]"
  #       requires_context:
  #         domain: script

  #     # scene
  #     - sentences:
  #         - "activate {name} [scene]"
  #       requires_context:
  #         domain: scene

  # HassTurnOff:
  #   data:
  #     # turn off
  #     - sentences:
  #         - "turn off [the] lights"

  #     - sentences:
  #         - "turn off [the] {name}"
  #       requires_context:
  #         domain:
  #           - light
  #           - switch
  #           - fan
  #           - media_player
  #           - input_boolean

  #     - sentences:
  #         - "turn off [all|the|all of the] {area} lights"
  #         - "turn off [all|the|all of the] lights in [the] {area}"

  #     - sentences:
  #         - "turn off [all|the|all of the] {floor} [floor] lights"
  #         - "turn off [all|the|all of the] lights (on|in) [the] {floor} [floor]"

  #     # close
  #     - sentences:
  #         - "close [the] {name}"
  #       requires_context:
  #         domain:
  #           - cover

  #     - sentences:
  #         - "close [the] {cover_classes} in [the] {area}"
  #         - "close [the] {area} {cover_classes}"
  #         - "close [the] {cover_classes} (on|in) [the] {floor} [floor]"
  #         - "close [the] {floor} [floor] {cover_classes}"

  #     # unlock
  #     - sentences:
  #         - "unlock [the] {name}"
  #       requires_context:
  #         domain: lock

  # # light brightness/color
  # HassLightSet:
  #   data:
  #     # brightness
  #     - sentences:
  #         - "set [the] brightness of [the] {name} to {brightness} percent"
  #         - "set [the] {name} brightness to {brightness} percent"
  #       requires_context:
  #         domain: light

  #     - sentences:
  #         - "set [the] brightness of [the] {area} to {brightness} percent"
  #         - "set [the] {area} brightness to {brightness} percent"

  #     - sentences:
  #         - "set [the] {floor} [floor] brightness to {brightness} percent"
  #         - "set [the] brightness of [the] {floor} [floor] to {brightness} percent"

  #     # color
  #     - sentences:
  #         - "set [the] [color of [the]] {name} to {color}"
  #         - "set [the] {name} [color] to {color}"
  #       requires_context:
  #         domain: light

  #     - sentences:
  #         - "set [the] [color of [the]] {area} lights to {color}"
  #         - "set [the] {area} lights to {color}"
  #         - "set [the] lights in [the] {area} to {color}"

  #     - sentences:
  #         - "set [the] [color of [the]] {floor} [floor] lights to {color}"
  #         - "set [the] {floor} [floor] lights to {color}"
  #         - "set [the] lights (on|in) [the] {floor} [floor] to {color}"

  # timers
  HassStartTimer:
    data:
      # seconds
      - sentences:
          - "<timer_set> [a] timer for {seconds} seconds"
        metadata:
          slot_combination: "seconds_only"

      # minutes
      - sentences:
          - "<timer_set> [a] timer for 1 minute"
        slots:
          minutes: 1
        metadata:
          slot_combination: "minutes_1"

      - sentences:
          - "<timer_set> [a] timer for {minutes_small:minutes} minutes"
          - "<timer_set> [a] timer for {minutes_large:minutes} minutes"
          - "<timer_set> [a] timer for {minutes_extra:minutes} minutes"
        metadata:
          slot_combination: "minutes_only"

      # minutes half
      - sentences:
          - "<timer_set> [a] timer for 1 and a {minutes_half:seconds} minutes"
        slots:
          minutes: 1
        metadata:
          slot_combination: "minutes_1_half"

      - sentences:
          - "<timer_set> [a] timer for {minutes_small:minutes} and a {minutes_half:seconds} minutes"
          - "<timer_set> [a] timer for {minutes_large:minutes} and a {minutes_half:seconds} minutes"
          - "<timer_set> [a] timer for {minutes_extra:minutes} and a {minutes_half:seconds} minutes"
        metadata:
          slot_combination: "minutes_half"

      # hours
      - sentences:
          - "<timer_set> [a] timer for 1 hour"
        slots:
          hours: 1
        metadata:
          slot_combination: "hours_1"

      - sentences:
          - "<timer_set> [a] timer for {hours} hours"
        metadata:
          slot_combination: "hours_only"

      # hours half
      - sentences:
          - "<timer_set> [a] timer for 1 and a {hours_half:minutes} hours"
        slots:
          hours: 1
        metadata:
          slot_combination: "hours_1_half"

      - sentences:
          - "<timer_set> [a] timer for {hours} and a {hours_half:minutes} hours"
        metadata:
          slot_combination: "hours_half"

      # hours + minutes
      - sentences:
          - "<timer_set> [a] timer for 1 hour and 1 minute"
        slots:
          hours: 1
          minutes: 1
        metadata:
          slot_combination: "hours_1_minutes_1"

      - sentences:
          - "<timer_set> [a] timer for 1 hour and {minutes_small:minutes} minutes"
          - "<timer_set> [a] timer for 1 hour and {minutes_large:minutes} minutes"
          - "<timer_set> [a] timer for 1 hour and {minutes_extra:minutes} minutes"
        slots:
          hours: 1
        metadata:
          slot_combination: "hours_1_minutes"

      - sentences:
          - "<timer_set> [a] timer for {hours} hours and 1 minute"
        slots:
          minutes: 1
        metadata:
          slot_combination: "hours_minutes_1"

      - sentences:
          - "<timer_set> [a] timer for {hours} hours and {minutes_small:minutes} minutes"
          - "<timer_set> [a] timer for {hours} hours and {minutes_large:minutes} minutes"
          - "<timer_set> [a] timer for {hours} hours and {minutes_extra:minutes} minutes"
        metadata:
          slot_combination: "hours_minutes"

  HassCancelTimer:
    data:
      - sentences:
          - "(cancel|stop) [the|my] timer"
        metadata:
          slot_combination: "default"

  HassCancelAllTimers:
    data:
      - sentences:
          - "(cancel|stop) all [[of ](the|my)] timers"
        metadata:
          slot_combination: "default"

  HassPauseTimer:
    data:
      - sentences:
          - "pause [the|my] timer"
        metadata:
          slot_combination: "default"

  HassUnpauseTimer:
    data:
      - sentences:
          - "resume [the|my] timer"
        metadata:
          slot_combination: "default"

  HassTimerStatus:
    data:
      - sentences:
          - "timer status"
          - "status of [the|my] timer[s]"
          - "[how much] time [is] left on [the|my] timer[s]"
        metadata:
          slot_combination: "default"

  # media players
  HassMediaPause:
    data:
      - sentences:
          - "pause"
        metadata:
          slot_combination: "default"
          context_area: true

      - sentences:
          - "pause [the] {name}"
        requires_context:
          domain: media_player
        metadata:
          slot_combination: "name_only"

  HassMediaUnpause:
    data:
      - sentences:
          - "resume"
        metadata:
          slot_combination: "default"
          context_area: true

      - sentences:
          - "resume [the] {name}"
        requires_context:
          domain: media_player
        metadata:
          slot_combination: "name_only"

  HassMediaNext:
    data:
      - sentences:
          - "next [(track|item)]"
          - "skip [[this ](track|song)]"
        metadata:
          slot_combination: "default"
          context_area: true

      - sentences:
          - "next [(track|item)] on [the] {name}"
          - "skip [[the ](track|song)] on [the] {name}"
        requires_context:
          domain: media_player
        metadata:
          slot_combination: "name_only"

  # temperature
  HassClimateGetTemperature:
    data:
      - sentences:
          - "(what is|what's) the (temp|temperature)"
        metadata:
          context_area: true
          slot_combination: "default"

      - sentences:
          - "(what is|what's) the {name} (temp|temperature)"
          - "(what is|what's) the (temp|temperature) of [the] {name}"
        requires_context:
          domain: climate
        metadata:
          slot_combination: "name_only"

      - sentences:
          - "(what is|what's) the (temp|temperature) in [the] {area}"
          - "(what is|what's) the {area} (temp|temperature)"
        metadata:
          slot_combination: "area_only"

      # - sentences:
      #     - "(what is|what's) the (temp|temperature) on [the] {floor}"
      #     - "(what is|what's) the {floor} (temp|temperature)"
      #   metadata:
      #     slot_combination: "floor_only"

  # # questions
  # HassGetState:
  #   data:
  #     # doors, etc.
  #     - sentences:
  #         - "is [the] {name} {cover_states:state}"
  #       requires_context:
  #         domain:
  #           - cover

  #     # locks
  #     - sentences:
  #         - "is [the] {name} {lock_states:state}"
  #       requires_context:
  #         domain: lock

  #     # sensors, etc.
  #     - sentences:
  #         - "what is [the [value of [the]]] {name}"
  #       requires_context:
  #         domain:
  #           - sensor
  #           - binary_sensor

  # # todo
  # HassListAddItem:
  #   data:
  #     - sentences:
  #         - "add {todo_item} to [the|my] {name} [list]"
  #       requires_context:
  #         domain: todo
